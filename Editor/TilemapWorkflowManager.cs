#if UNITY_EDITOR
using UnityEngine;
using UnityEditor;
using UnityEngine.Tilemaps;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace TilemapTools
{
    public class TilemapWorkflowManager : EditorWindow
    {
        // 添加EditorPrefs的键名前缀
        private const string PREFS_PREFIX = "TilemapWorkflow_";
        // 工作流步骤枚举，添加AutomatedWorkflow作为第一个选项
        public enum WorkflowStep
        {
            AutomatedWorkflow,     // 新增：自动化工作流
            GeneratePalette,
            CreateRules,
            ApplyTerrain,
            LayerEditing
        }

        private WorkflowStep currentStep = WorkflowStep.AutomatedWorkflow;// 默认显示自动化工作流

        // 添加静态变量来跟踪生成的资源
        private static string lastGeneratedPalettePath = "";
        private static TilemapWorkflowManager instance;
        
        // 本地化文本字典
        private Dictionary<string, Dictionary<string, string>> localizedTexts;
        private bool showLanguageSettings = false;
        private TilemapLanguageManager.Language selectedLanguage;

        // 自动化工作流所需的变量
        private Texture2D automatedSourceTexture;
        private Texture2D automatedOutputTexture;
        private string automatedOutputFolder = "Assets/GeneratedTilemaps";
        private string automatedPaletteName = "AutoGeneratedPalette";
        private string automatedRuleAssetName = "AutoGeneratedRules";
        private string inputPaletteName = "AutoGeneratedPalette";
        private string outputPaletteName = "AutoGeneratedPalette_Output";
        private bool automatedcreatePalette = true;
        private bool automatedExtractRules = true;
        private bool automatedApplyRules = true;
        
        // 添加新的成员变量用于路径
        private string inputTilesPath;
        private string inputPalettesPath;
        private string outputTilesPath;
        private string outputPalettesPath;
        private string rulesPath;
        private Tilemap sourceTilemap;
        private Tilemap outputTilemap;

        //引用已经创建的规则文件
        private List<string> existingRuleGuids = new List<string>();
        private List<string> existingRuleNames = new List<string>();
        private Vector2 ruleListScrollPosition;
        private bool isRuleListInitialized = false;
        public static bool IsAutomatedWorkflow { get; set; } = false;

        public static void ShowWindow()
        {
            instance = GetWindow<TilemapWorkflowManager>(GetLocalizedText("windowTitle"));
        }

        // 添加静态方法供其他工具调用
        public static void SetLastGeneratedPalette(string palettePath)
        {
            lastGeneratedPalettePath = palettePath;
            if (instance != null)
            {
                instance.Repaint();
            }
        }

        public static void SetCurrentStep(WorkflowStep step)
        {
            if (instance == null)
            {
                instance = GetWindow<TilemapWorkflowManager>(GetLocalizedText("windowTitle"));
            }
            instance.currentStep = step;
            instance.Repaint();
        }

        private void OnEnable()
        {
            // 设置单例引用
            instance = this;
            
            // 加载设置
            LoadSettings();
            
            // 初始化本地化
            if (localizedTexts == null)
            {
                InitializeLocalization();
            }
            
            // 设置本地化的窗口标题
            titleContent = new GUIContent(GetLocalizedText("windowTitle"));
            
            // 初始化语言设置
            selectedLanguage = TilemapLanguageManager.GetCurrentLanguageSetting();
        }

        // 添加OnDisable方法，在窗口关闭时保存设置
        private void OnDisable()
        {
            SaveSettings();
        }
        private void SaveSettings()
        {
            // 保存当前步骤
            EditorPrefs.SetInt(PREFS_PREFIX + "CurrentStep", (int)currentStep);
            
            // 保存最后生成的调色板路径
            EditorPrefs.SetString(PREFS_PREFIX + "LastGeneratedPalette", lastGeneratedPalettePath);
            
            // 保存自动化工作流设置
            if (automatedSourceTexture != null)
                EditorPrefs.SetString(PREFS_PREFIX + "SourceTexturePath", AssetDatabase.GetAssetPath(automatedSourceTexture));
            
            if (automatedOutputTexture != null)
                EditorPrefs.SetString(PREFS_PREFIX + "OutputTexturePath", AssetDatabase.GetAssetPath(automatedOutputTexture));
            
            EditorPrefs.SetString(PREFS_PREFIX + "OutputFolder", automatedOutputFolder);
            EditorPrefs.SetString(PREFS_PREFIX + "PaletteName", automatedPaletteName);
            EditorPrefs.SetString(PREFS_PREFIX + "RuleAssetName", automatedRuleAssetName);
            EditorPrefs.SetString(PREFS_PREFIX + "InputPaletteName", inputPaletteName);
            EditorPrefs.SetString(PREFS_PREFIX + "OutputPaletteName", outputPaletteName);
            
            EditorPrefs.SetBool(PREFS_PREFIX + "CreatePalette", automatedcreatePalette);
            EditorPrefs.SetBool(PREFS_PREFIX + "ExtractRules", automatedExtractRules);
            EditorPrefs.SetBool(PREFS_PREFIX + "ApplyRules", automatedApplyRules);
            
            // 保存路径设置
            EditorPrefs.SetString(PREFS_PREFIX + "InputTilesPath", inputTilesPath);
            EditorPrefs.SetString(PREFS_PREFIX + "InputPalettesPath", inputPalettesPath);
            EditorPrefs.SetString(PREFS_PREFIX + "OutputTilesPath", outputTilesPath);
            EditorPrefs.SetString(PREFS_PREFIX + "OutputPalettesPath", outputPalettesPath);
            EditorPrefs.SetString(PREFS_PREFIX + "RulesPath", rulesPath);
            
            // 保存Tilemap引用（如果有）
            if (sourceTilemap != null)
                EditorPrefs.SetString(PREFS_PREFIX + "SourceTilemapPath", GetGameObjectPath(sourceTilemap.gameObject));
            
            if (outputTilemap != null)
                EditorPrefs.SetString(PREFS_PREFIX + "OutputTilemapPath", GetGameObjectPath(outputTilemap.gameObject));
        }

        // 添加LoadSettings方法，从EditorPrefs加载所有设置
        private void LoadSettings()
        {
            // 加载当前步骤
            currentStep = (WorkflowStep)EditorPrefs.GetInt(PREFS_PREFIX + "CurrentStep", (int)WorkflowStep.AutomatedWorkflow);
            
            // 加载最后生成的调色板路径
            lastGeneratedPalettePath = EditorPrefs.GetString(PREFS_PREFIX + "LastGeneratedPalette", "");
            
            // 加载自动化工作流设置
            string sourceTexturePath = EditorPrefs.GetString(PREFS_PREFIX + "SourceTexturePath", "");
            if (!string.IsNullOrEmpty(sourceTexturePath))
                automatedSourceTexture = AssetDatabase.LoadAssetAtPath<Texture2D>(sourceTexturePath);
            
            string outputTexturePath = EditorPrefs.GetString(PREFS_PREFIX + "OutputTexturePath", "");
            if (!string.IsNullOrEmpty(outputTexturePath))
                automatedOutputTexture = AssetDatabase.LoadAssetAtPath<Texture2D>(outputTexturePath);
            
            automatedOutputFolder = EditorPrefs.GetString(PREFS_PREFIX + "OutputFolder", "Assets/GeneratedTilemaps");
            automatedPaletteName = EditorPrefs.GetString(PREFS_PREFIX + "PaletteName", "AutoGeneratedPalette");
            automatedRuleAssetName = EditorPrefs.GetString(PREFS_PREFIX + "RuleAssetName", "AutoGeneratedRules");
            inputPaletteName = EditorPrefs.GetString(PREFS_PREFIX + "InputPaletteName", "AutoGeneratedPalette");
            outputPaletteName = EditorPrefs.GetString(PREFS_PREFIX + "OutputPaletteName", "AutoGeneratedPalette_Output");
            
            automatedcreatePalette = EditorPrefs.GetBool(PREFS_PREFIX + "CreatePalette", true);
            automatedExtractRules = EditorPrefs.GetBool(PREFS_PREFIX + "ExtractRules", true);
            automatedApplyRules = EditorPrefs.GetBool(PREFS_PREFIX + "ApplyRules", true);
            
            // 加载路径设置
            inputTilesPath = EditorPrefs.GetString(PREFS_PREFIX + "InputTilesPath", automatedOutputFolder + "/InputTiles");
            inputPalettesPath = EditorPrefs.GetString(PREFS_PREFIX + "InputPalettesPath", automatedOutputFolder + "/InputPalettes");
            outputTilesPath = EditorPrefs.GetString(PREFS_PREFIX + "OutputTilesPath", automatedOutputFolder + "/OutputTiles");
            outputPalettesPath = EditorPrefs.GetString(PREFS_PREFIX + "OutputPalettesPath", automatedOutputFolder + "/OutputPalettes");
            rulesPath = EditorPrefs.GetString(PREFS_PREFIX + "RulesPath", automatedOutputFolder + "/Rules");
            
            // 尝试加载Tilemap引用
            string sourceTilemapPath = EditorPrefs.GetString(PREFS_PREFIX + "SourceTilemapPath", "");
            if (!string.IsNullOrEmpty(sourceTilemapPath))
            {
                GameObject sourceGO = FindGameObjectByPath(sourceTilemapPath);
                if (sourceGO != null)
                    sourceTilemap = sourceGO.GetComponent<Tilemap>();
            }
            
            string outputTilemapPath = EditorPrefs.GetString(PREFS_PREFIX + "OutputTilemapPath", "");
            if (!string.IsNullOrEmpty(outputTilemapPath))
            {
                GameObject outputGO = FindGameObjectByPath(outputTilemapPath);
                if (outputGO != null)
                    outputTilemap = outputGO.GetComponent<Tilemap>();
            }
        }

        // 辅助方法：获取GameObject的完整路径
        private string GetGameObjectPath(GameObject obj)
        {
            if (obj == null)
                return "";
                
            string path = obj.name;
            Transform parent = obj.transform.parent;
            
            while (parent != null)
            {
                path = parent.name + "/" + path;
                parent = parent.parent;
            }
            
            return path;
        }

        // 辅助方法：通过路径查找GameObject
        private GameObject FindGameObjectByPath(string path)
        {
            if (string.IsNullOrEmpty(path))
                return null;
                
            string[] parts = path.Split('/');
            if (parts.Length == 0)
                return null;
                
            // 查找根对象
            GameObject current = GameObject.Find(parts[0]);
            if (current == null)
                return null;
                
            // 遍历路径
            for (int i = 1; i < parts.Length; i++)
            {
                Transform child = current.transform.Find(parts[i]);
                if (child == null)
                    return null;
                    
                current = child.gameObject;
            }
            
            return current;
        }

        private static void InitializeLocalizationStatic()
        {
            // 确保实例存在
            if (instance == null)
            {
                instance = GetWindow<TilemapWorkflowManager>("Tilemap Workflow");
            }

            // 初始化本地化文本
            if (instance.localizedTexts == null)
            {
                instance.InitializeLocalization();
                
                // 本地化系统初始化后，更新窗口标题
                instance.titleContent = new GUIContent(GetLocalizedText("windowTitle"));
            }
        }

        // 初始化本地化文本
        private void InitializeLocalization()
        {
            localizedTexts = new Dictionary<string, Dictionary<string, string>>();

            // 英语文本
            var enTexts = new Dictionary<string, string>
            {
                {"title", "Tilemap Creation Workflow"},
                {"step1", "1. Generate Palette"},
                {"step2", "2. Create Rules"},
                {"step3", "3. Apply Terrain"},
                {"step4", "4. Layer Tools"},
                {"step1Help", "Step 1: Generate a Tile Palette from a sliced Sprite Sheet."},
                {"openGenerator", "Open Tile Palette Generator"},
                {"lastGenerated", "Last Generated Palette:"},
                {"selectInProject", "Select in Project"},
                {"instructions", "Instructions:"},
                {"step1Instr1", "1. Select a sliced sprite sheet texture"},
                {"step1Instr2", "2. Configure output paths and settings"},
                {"step1Instr3", "3. Click 'Generate Tile Palette'"},
                {"step1Instr4", "4. Return here and go to next step"},
                {"next", "Next: {0} →"},
                {"previous", "← Previous"},
                {"step2Help", "Step 2: Create an AutoTerrainTileRuleConfiger asset to define terrain rules."},
                {"createNewRule", "Create New Auto Terrain Tile Rule"},
                {"step2Instr1", "1. Create or select an AutoTerrainTileRuleConfiger asset"},
                {"step2Instr2", "2. Configure terrain rules in the Inspector"},
                {"step2Instr3", "3. Assign sprites from your generated palette"},
                {"step2Instr4", "4. Return here and go to next step"},
                {"openTerrainEditor", "Open Auto Terrain Editor for multi-rule application"},
                {"step3Instr1", "1. Select source and output tilemaps"},
                {"step3Instr2", "2. Add your AutoTerrainTileRuleConfiger as iteration step"},
                {"step3Instr3", "3. Apply terrain rules to generate final result"},
                {"step3Instr4", "4. Return here for layer editing tools"},
                {"step4Help", "Step 4: Use advanced tools to edit and manage tilemap layers."},
                {"openLayerTool", "Open Tilemap Layer Tool"},
                {"step4Instr1", "1. Select source and target tilemaps"},
                {"step4Instr2", "2. Use selection tools to choose areas"},
                {"step4Instr3", "3. Move, copy, or manipulate tile layers"},
                {"step4Instr4", "4. Save selections for future use"},
                {"workflowComplete", "Workflow Complete! You can cycle through steps as needed."},
                {"languageSettings", "Language Settings"},
                {"language", "Language:"},
                {"apply", "Apply"},
                {"restartRequired", "Changes will take full effect after restarting windows"},
                {"automatedWorkflow", "Automated Workflow"},
                {"automatedWorkflowTitle", "Automated Tilemap Workflow"},
                {"automatedWorkflowDescription", "This tool automates the entire tilemap creation process from source texture to final tilemap."},
                {"textureSelection", "Texture Selection"},
                {"sourceTexture", "Source Texture (Sliced)"},
                {"outputTexture", "Target Texture (Optional)"},
                {"outputSettings", "Output Settings"},
                {"outputFolder", "Output Folder:"},
                {"browse", "Browse..."},
                {"selectOutputFolder", "Select Output Folder"},
                {"paletteName", "Palette Name:"},
                {"ruleAssetName", "Rule Asset Name:"},
                {"automationOptions", "Automation Options"},
                {"createPalette", "Create Palettes"},
                {"extractRules", "Extract Rules"},
                {"applyRules", "Apply Rules"},
                {"preserveGuids", "Preserve GUIDs"},
                {"executeAutomation", "Execute Automated Workflow"},
                {"automatedWorkflowSteps", "This workflow will:\n1. Generate a tile palette from the source texture\n2. Create rule assets for terrain generation\n3. Apply rules to create final tilemaps\n4. Enable/disable individual steps, adjust step order\n5. Suitable for complex terrain generation, like base terrain, detail addition, edge processing, etc."},
                {"error", "Error"},
                {"success", "Success"},
                {"invalidSourceTexture", "Please select a valid source texture."},
                {"automatedWorkflowProgress", "Automated Workflow Progress"},
                {"preparingWorkflow", "Preparing workflow..."},
                {"generatingPalette", "Generating tile palette..."},
                {"creatingRules", "Creating terrain rules..."},
                {"applyingRules", "Applying rules to tilemap..."},
                {"paletteGenerationFailed", "Failed to generate tile palette:"},
                {"paletteNotGenerated", "Tile palette was not generated. Please check the console for errors."},
                {"ruleCreationFailed", "Failed to create terrain rules:"},
                {"ruleApplicationFailed", "Failed to apply terrain rules:"},
                {"workflowCompleted", "Automated workflow completed successfully!"},
                {"existingRules", "Existing Rules"},
                {"select", "Select"},
                {"noRulesFound", "No rule assets found in the project. Create a new one to get started."},
                {"findExistingRules", "Find Existing Rules"},
                {"inputTilesPath", "Input Tiles Output Path:"},
                {"inputPalettesPath", "Input Palette Output Path:"},
                {"inputPaletteName", "Input Palette Filename:"},
                {"outputTilesPath", "Output Tiles Output Path:"},
                {"outputPalettesPath", "Output Palette Output Path:"},
                {"outputPaletteName", "Output Palette Filename:"},
                {"rulesPath", "Rules Asset Output Path:"},
                {"sourceTilemap", "Input Tilemap:"},
                {"outputTilemap", "Output Tilemap:"},
                {"outputTextureGeneration", "Generating output texture palette..."},
                {"selectInputTilesPath", "Select Input Tiles Output Path"},
                {"selectInputPalettesPath", "Select Input Palette Output Path"},
                {"selectOutputTilesPath", "Select Output Tiles Output Path"},
                {"selectOutputPalettesPath", "Select Output Palette Output Path"},
                {"selectRulesPath", "Select Rules Asset Output Path"},
                {"createRuleAsset", "Create Auto Terrain Tile"},
                {"newRuleAssetName", "NewAutoTerrainTileRuleConfiger"},
                {"chooseRuleLocation", "Choose location"},
                {"selectPaletteFile", "Select Palette File"},
                {"selectRuleFile", "Select Rule File"},
                {"outputTextureWarning", "Output texture palette was not generated."},
                {"cannotLoadPalette", "Cannot load palette prefab:"},
                {"cannotLoadRuleAsset", "Cannot load rule asset, skipping rule application step."},
                {"ok", "OK"},
                {"windowTitle", "Tilemap Workflow"},
                {"selectPaletteLocation", "Select Palette Location"},
                {"savedOperations", "Saved Terrain Operations"},
                {"addOperation", "Add New Operation"},
                {"newOperation", "New Operation"},
                {"applyOperation", "Apply"},
                {"applyAllEnabled", "Apply All Enabled Operations"},
                {"terrainRules", "Terrain Rules"},
                {"step3Help", "Use this step to apply terrain rules to your tilemaps. You can save common operations for quick access."},
            };
            localizedTexts["en"] = enTexts;

            // 中文文本
            var zhTexts = new Dictionary<string, string>
            {
                {"title", "瓦片地图创建工作流"},
                {"step1", "1. 生成调色板"},
                {"step2", "2. 创建规则"},
                {"step3", "3. 应用地形"},
                {"step4", "4. 图层工具"},
                {"step1Help", "步骤1：从切片的精灵表生成瓦片调色板。"},
                {"openGenerator", "打开瓦片调色板生成器"},
                {"lastGenerated", "最近生成的调色板："},
                {"selectInProject", "在项目中选择"},
                {"instructions", "操作指南："},
                {"step1Instr1", "1. 选择已切片的精灵表纹理"},
                {"step1Instr2", "2. 配置输出路径和设置"},
                {"step1Instr3", "3. 点击<生成瓦片调色板>"},
                {"step1Instr4", "4. 返回此处并进入下一步"},
                {"next", "下一步：{0} →"},
                {"previous", "← 上一步"},
                {"step2Help", "步骤2：创建自动地形瓦片规则配置器资产以定义地形规则。"},
                {"createNewRule", "创建新的自动地形瓦片规则"},
                {"step2Instr1", "1. 创建或选择自动地形瓦片规则配置器资产"},
                {"step2Instr2", "2. 在检查器中配置地形规则"},
                {"step2Instr3", "3. 从生成的调色板中分配精灵"},
                {"step2Instr4", "4. 返回此处并进入下一步"},
                {"openTerrainEditor", "打开自动地形编辑器以进行多规则应用"},
                {"step3Instr1", "1. 选择源和输出瓦片地图"},
                {"step3Instr2", "2. 添加您的自动地形瓦片规则配置器作为迭代步骤"},
                {"step3Instr3", "3. 应用地形规则生成最终结果"},
                {"step3Instr4", "4. 返回此处使用图层编辑工具"},
                {"step4Help", "步骤4：使用高级工具编辑和管理瓦片地图图层。"},
                {"openLayerTool", "打开瓦片地图图层工具"},
                {"step4Instr1", "1. 选择源和目标瓦片地图"},
                {"step4Instr2", "2. 使用选择工具选择区域"},
                {"step4Instr3", "3. 移动、复制或操作瓦片图层"},
                {"step4Instr4", "4. 保存选择以供将来使用"},
                {"workflowComplete", "工作流程完成！您可以根据需要循环使用各个步骤。"},
                {"languageSettings", "语言设置"},
                {"language", "语言："},
                {"apply", "应用"},
                {"restartRequired", "更改将在重新启动窗口后完全生效"},
                {"automatedWorkflow", "自动化工作流"},
                {"automatedWorkflowTitle", "自动化瓦片地图工作流"},
                {"automatedWorkflowDescription", "此工具可以自动化从源纹理到最终瓦片地图的整个创建过程。"},
                {"textureSelection", "纹理选择"},
                {"sourceTexture", "源纹理（已切片）"},
                {"outputTexture", "目标纹理（可选）"},
                {"outputSettings", "输出设置"},
                {"outputFolder", "输出文件夹:"},
                {"browse", "浏览..."},
                {"selectOutputFolder", "选择输出文件夹"},
                {"paletteName", "调色板名称:"},
                {"ruleAssetName", "规则资产名称:"},
                {"automationOptions", "自动化选项"},
                {"createPalette", "创建调色板"},
                {"extractRules", "提取规则"},
                {"applyRules", "应用规则"},
                {"preserveGuids", "保留GUID"},
                {"executeAutomation", "执行自动化工作流"},
                {"automatedWorkflowSteps", "此工作流将：\n1. 从源纹理生成瓦片调色板\n2. 创建地形生成的规则资产\n3. 应用规则创建最终瓦片地图\n4. 启用/禁用单个步骤，调整步骤顺序\n5. 适用于复杂地形生成，如基础地形、细节添加、边缘处理等"},
                {"error", "错误"},
                {"success", "成功"},
                {"invalidSourceTexture", "请选择有效的源纹理。"},
                {"automatedWorkflowProgress", "自动化工作流进度"},
                {"preparingWorkflow", "准备工作流..."},
                {"generatingPalette", "生成瓦片调色板..."},
                {"creatingRules", "创建地形规则..."},
                {"applyingRules", "将规则应用到瓦片地图..."},
                {"paletteGenerationFailed", "生成瓦片调色板失败:"},
                {"paletteNotGenerated", "瓦片调色板未生成。请检查控制台以获取错误信息。"},
                {"ruleCreationFailed", "创建地形规则失败:"},
                {"ruleApplicationFailed", "应用地形规则失败:"},
                {"workflowCompleted", "自动化工作流成功完成！"},
                {"existingRules", "现有规则"},
                {"select", "选择"},
                {"noRulesFound", "项目中未找到规则资产。创建一个新的规则开始使用。"},
                {"findExistingRules", "查找现有规则"},
                {"inputTilesPath", "输入纹理Tile输出路径:"},
                {"inputPalettesPath", "输入调色板输出路径:"},
                {"inputPaletteName", "输入调色板文件名:"},
                {"outputTilesPath", "输出纹理Tile输出路径:"},
                {"outputPalettesPath", "输出调色板输出路径:"},
                {"outputPaletteName", "输出调色板文件名:"},
                {"rulesPath", "规则资产输出路径:"},
                {"sourceTilemap", "输入Tilemap:"},
                {"outputTilemap", "输出Tilemap:"},
                {"outputTextureGeneration", "生成输出纹理调色板..."},
                {"selectInputTilesPath", "选择输入纹理Tile输出路径"},
                {"selectInputPalettesPath", "选择输入调色板输出路径"},
                {"selectOutputTilesPath", "选择输出纹理Tile输出路径"},
                {"selectOutputPalettesPath", "选择输出调色板输出路径"},
                {"selectRulesPath", "选择规则资产输出路径"},
                {"createRuleAsset", "创建自动地形瓦片"},
                {"newRuleAssetName", "新建自动地形瓦片规则配置"},
                {"chooseRuleLocation", "选择保存位置"},
                {"selectPaletteFile", "选择调色板文件"},
                {"selectRuleFile", "选择规则文件"},
                {"outputTextureWarning", "输出纹理调色板未生成。"},
                {"cannotLoadPalette", "无法加载调色板预制体："},
                {"cannotLoadRuleAsset", "无法加载规则资产，跳过应用规则步骤。"},
                {"ok", "确定"},
                {"windowTitle", "瓦片地图工作流"},
                {"selectPaletteLocation", "选择调色板位置"},
                {"savedOperations", "已保存的地形操作"},
                {"addOperation", "添加新操作"},
                {"newOperation", "新操作"},
                {"applyOperation", "应用"},
                {"applyAllEnabled", "应用所有已启用的操作"},
                {"terrainRules", "地形规则"},
                {"step3Help", "使用此步骤将地形规则应用到您的瓦片地图。您可以保存常用操作以便快速访问。"},
            };
            localizedTexts["zh-CN"] = zhTexts;
        }

        // 获取本地化文本
        private static string GetLocalizedText(string key, params object[] args)
        {
            // 初始化本地化文本字典（如果尚未初始化）
            if (instance == null || instance.localizedTexts == null)
            {
                InitializeLocalizationStatic();
            }

            string languageCode = TilemapLanguageManager.GetCurrentLanguageCode();

            // 检查当前语言是否有该文本
            if (instance.localizedTexts.ContainsKey(languageCode) && instance.localizedTexts[languageCode].ContainsKey(key))
            {
                string text = instance.localizedTexts[languageCode][key];
                if (args != null && args.Length > 0)
                {
                    return string.Format(text, args);
                }
                return text;
            }

            // 如果没有找到，使用英语
            if (instance.localizedTexts.ContainsKey("en") && instance.localizedTexts["en"].ContainsKey(key))
            {
                string text = instance.localizedTexts["en"][key];
                if (args != null && args.Length > 0)
                {
                    return string.Format(text, args);
                }
                return text;
            }

            // 如果英语也没有，返回键名
            return key;
        }

        private void OnGUI()
        {
            // 标题和语言设置按钮
            EditorGUILayout.BeginHorizontal();
            GUILayout.Label(GetLocalizedText("title"), EditorStyles.boldLabel);
            GUILayout.FlexibleSpace();
            if (GUILayout.Button(GetLocalizedText("languageSettings"), EditorStyles.miniButton))
            {
                showLanguageSettings = !showLanguageSettings;
            }
            EditorGUILayout.EndHorizontal();

            // 语言设置面板
            if (showLanguageSettings)
            {
                EditorGUILayout.BeginVertical(EditorStyles.helpBox);

                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField(GetLocalizedText("language"), GUILayout.Width(80));
                TilemapLanguageManager.Language newLanguage = (TilemapLanguageManager.Language)EditorGUILayout.EnumPopup(
                    selectedLanguage
                );

                if (newLanguage != selectedLanguage)
                {
                    selectedLanguage = newLanguage;
                }
                EditorGUILayout.EndHorizontal();

                EditorGUILayout.Space();

                if (GUILayout.Button(GetLocalizedText("apply")))
                {
                    TilemapLanguageManager.SetCurrentLanguageSetting(selectedLanguage);
                    // 应用后自动隐藏语言设置菜单
                    showLanguageSettings = false;
                    // 刷新界面
                    Repaint();
                }

                EditorGUILayout.HelpBox(GetLocalizedText("restartRequired"), MessageType.Info);
                EditorGUILayout.EndVertical();

                EditorGUILayout.Space();
            }

            // 工作流步骤标签页
            string[] tabLabels = new string[]
            {
                GetLocalizedText("automatedWorkflow"),
                GetLocalizedText("step1"),
                GetLocalizedText("step2"),
                GetLocalizedText("step3"),
                GetLocalizedText("step4")
            };

            currentStep = (WorkflowStep)GUILayout.Toolbar((int)currentStep, tabLabels);

            EditorGUILayout.Space();

            // 根据当前步骤显示对应的界面
            switch (currentStep)
            {
                case WorkflowStep.AutomatedWorkflow:
                    DrawAutomatedWorkflowStep();
                    break;
                case WorkflowStep.GeneratePalette:
                    DrawPaletteGenerationStep();
                    break;
                case WorkflowStep.CreateRules:
                    DrawRuleCreationStep();
                    break;
                case WorkflowStep.ApplyTerrain:
                    DrawTerrainApplicationStep();
                    break;
                case WorkflowStep.LayerEditing:
                    DrawLayerEditingStep();
                    break;
            }
        }

        private void DrawAutomatedWorkflowStep()
        {
            EditorGUILayout.LabelField(GetLocalizedText("automatedWorkflowTitle"), EditorStyles.boldLabel);
            EditorGUILayout.HelpBox(GetLocalizedText("automatedWorkflowDescription"), MessageType.Info);

            EditorGUILayout.Space();

            // 保留GUID引用选项
            bool preserveGuids = EditorGUILayout.Toggle(GetLocalizedText("preserveGuids"), true);

            EditorGUILayout.Space();

            // 纹理选择
            EditorGUILayout.LabelField(GetLocalizedText("textureSelection"), EditorStyles.boldLabel);

            // 源输入纹理（已切片）
            automatedSourceTexture = (Texture2D)EditorGUILayout.ObjectField(
                GetLocalizedText("sourceTexture"),
                automatedSourceTexture,
                typeof(Texture2D),
                false);

            // 源输出纹理（已切片）
            automatedOutputTexture = (Texture2D)EditorGUILayout.ObjectField(
                GetLocalizedText("outputTexture"),
                automatedOutputTexture,
                typeof(Texture2D),
                false);

            EditorGUILayout.Space();

            // 调色板输出设置
            EditorGUILayout.LabelField(GetLocalizedText("outputSettings"), EditorStyles.boldLabel);

            // 1. 输入纹理对应的tile资源输出位置
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField(GetLocalizedText("inputTilesPath"), GUILayout.Width(150));
            inputTilesPath = EditorGUILayout.TextField(inputTilesPath);
            if (GUILayout.Button(GetLocalizedText("browse"), GUILayout.Width(80)))
            {
                string selectedPath = EditorUtility.OpenFolderPanel(
                    GetLocalizedText("selectInputTilesPath"),
                    inputTilesPath,
                    "");
                if (!string.IsNullOrEmpty(selectedPath) && selectedPath.StartsWith(Application.dataPath))
                    inputTilesPath = "Assets" + selectedPath.Substring(Application.dataPath.Length);
            }
            EditorGUILayout.EndHorizontal();

            // 2. 输入纹理对应的调色板位置和文件名 - 合并为一个设置
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField(GetLocalizedText("selectInputPalettesPath"), GUILayout.Width(150));
            string inputPaletteFullPath = string.IsNullOrEmpty(inputPalettesPath) ? "" : 
                Path.Combine(inputPalettesPath, $"{inputPaletteName}.prefab").Replace("\\", "/");
            EditorGUILayout.TextField(inputPaletteFullPath);
            if (GUILayout.Button(GetLocalizedText("browse"), GUILayout.Width(80)))
            {
                string selectedPath = EditorUtility.SaveFilePanelInProject(
                    GetLocalizedText("selectPaletteFile"),
                    inputPaletteName,
                    "prefab",
                    "");
                
                if (!string.IsNullOrEmpty(selectedPath))
                {
                    // 从完整路径中分离出目录和文件名
                    inputPalettesPath = Path.GetDirectoryName(selectedPath).Replace("\\", "/");
                    inputPaletteName = Path.GetFileNameWithoutExtension(selectedPath);
                }
            }
            EditorGUILayout.EndHorizontal();

            // 3. 输出纹理对应的tile资源输出位置
            EditorGUI.BeginDisabledGroup(automatedOutputTexture == null);

            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField(GetLocalizedText("outputTilesPath"), GUILayout.Width(150));
            outputTilesPath = EditorGUILayout.TextField(outputTilesPath);
            if (GUILayout.Button(GetLocalizedText("browse"), GUILayout.Width(80)))
            {
                string selectedPath = EditorUtility.OpenFolderPanel(
                    GetLocalizedText("selectOutputTilesPath"),
                    outputTilesPath,
                    "");
                if (!string.IsNullOrEmpty(selectedPath) && selectedPath.StartsWith(Application.dataPath))
                    outputTilesPath = "Assets" + selectedPath.Substring(Application.dataPath.Length);
            }
            EditorGUILayout.EndHorizontal();

            // 4. 输出纹理对应的调色板位置和文件名 - 合并为一个设置
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField(GetLocalizedText("selectOutputPalettesPath"), GUILayout.Width(150));
            string outputPaletteFullPath = string.IsNullOrEmpty(outputPalettesPath) ? "" : 
                Path.Combine(outputPalettesPath, $"{outputPaletteName}.prefab").Replace("\\", "/");
            EditorGUILayout.TextField(outputPaletteFullPath);
            if (GUILayout.Button(GetLocalizedText("browse"), GUILayout.Width(80)))
            {
                string selectedPath = EditorUtility.SaveFilePanelInProject(
                    GetLocalizedText("selectPaletteFile"),
                    outputPaletteName,
                    "prefab",
                    "");
                
                if (!string.IsNullOrEmpty(selectedPath))
                {
                    // 从完整路径中分离出目录和文件名
                    outputPalettesPath = Path.GetDirectoryName(selectedPath).Replace("\\", "/");
                    outputPaletteName = Path.GetFileNameWithoutExtension(selectedPath);
                }
            }
            EditorGUILayout.EndHorizontal();

            // 规则资产位置和文件名 - 合并为一个设置
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField(GetLocalizedText("rulesPath"), GUILayout.Width(150));
            string ruleAssetFullPath = string.IsNullOrEmpty(rulesPath) ? "" : 
                Path.Combine(rulesPath, $"{automatedRuleAssetName}.asset").Replace("\\", "/");
            EditorGUILayout.TextField(ruleAssetFullPath);
            if (GUILayout.Button(GetLocalizedText("browse"), GUILayout.Width(80)))
            {
                string selectedPath = EditorUtility.SaveFilePanelInProject(
                    GetLocalizedText("selectRuleFile"),
                    automatedRuleAssetName,
                    "asset",
                    "");
                
                if (!string.IsNullOrEmpty(selectedPath))
                {
                    // 从完整路径中分离出目录和文件名
                    rulesPath = Path.GetDirectoryName(selectedPath).Replace("\\", "/");
                    automatedRuleAssetName = Path.GetFileNameWithoutExtension(selectedPath);
                }
            }
            EditorGUILayout.EndHorizontal();

            // 指定输入的Tilemap
            sourceTilemap = (Tilemap)EditorGUILayout.ObjectField(
                GetLocalizedText("sourceTilemap"),
                sourceTilemap,
                typeof(Tilemap),
                true);

            // 指定输出结果的Tilemap
            outputTilemap = (Tilemap)EditorGUILayout.ObjectField(
                GetLocalizedText("outputTilemap"),
                outputTilemap,
                typeof(Tilemap),
                true);

            EditorGUILayout.Space();

            // 自动化选项
            EditorGUILayout.LabelField(GetLocalizedText("automationOptions"), EditorStyles.boldLabel);
            automatedcreatePalette = EditorGUILayout.Toggle(GetLocalizedText("createPalette"), automatedcreatePalette);
            automatedExtractRules = EditorGUILayout.Toggle(GetLocalizedText("extractRules"), automatedExtractRules);
            automatedApplyRules = EditorGUILayout.Toggle(GetLocalizedText("applyRules"), automatedApplyRules);

            EditorGUILayout.Space();

            IsAutomatedWorkflow = true;

            // 执行按钮
            EditorGUI.BeginDisabledGroup(automatedSourceTexture == null);
            if (GUILayout.Button(GetLocalizedText("executeAutomation"), GUILayout.Height(40)))
            {
                // 使用类成员变量直接调用ExecuteAutomatedWorkflow
                ExecuteAutomatedWorkflow(
                    preserveGuids,
                    automatedSourceTexture,
                    automatedOutputTexture,
                    inputTilesPath,
                    inputPalettesPath,
                    inputPaletteName, 
                    outputTilesPath,
                    outputPalettesPath,
                    outputPaletteName,  
                    rulesPath,
                    automatedRuleAssetName,
                    sourceTilemap,
                    outputTilemap
                );
            }
            EditorGUI.EndDisabledGroup();

            // 工作流步骤说明
            EditorGUILayout.Space();
            EditorGUILayout.HelpBox(GetLocalizedText("automatedWorkflowSteps"), MessageType.Info);
        }

        private void ExecuteAutomatedWorkflow(
            bool preserveGuids,
            Texture2D sourceTexture,
            Texture2D outputTexture,
            string inputTilesPath,
            string inputPalettesPath,
            string inputPaletteName,
            string outputTilesPath,
            string outputPalettesPath,
            string outputPaletteName,
            string rulesPath,
            string ruleAssetName,
            Tilemap sourceTilemap,
            Tilemap outputTilemap)
        {
            if (sourceTexture == null)
            {
                EditorUtility.DisplayDialog(
                    GetLocalizedText("error"),
                    GetLocalizedText("invalidSourceTexture"),
                    GetLocalizedText("ok"));
                return;
            }

            // 显示进度条
            EditorUtility.DisplayProgressBar(
                GetLocalizedText("automatedWorkflowProgress"),
                GetLocalizedText("preparingWorkflow"),
                0.0f);

            string inputPalettePath = null;
            string outputPalettePath = null;

            try
            {
                // 步骤1：生成调色板
                if (automatedcreatePalette)
                {
                    EditorUtility.DisplayProgressBar(
                        GetLocalizedText("automatedWorkflowProgress"),
                        GetLocalizedText("generatingPalette"),
                        0.2f);

                    // 确保目录存在
                    Directory.CreateDirectory(inputTilesPath);
                    Directory.CreateDirectory(inputPalettesPath);

                    // 使用静态方法生成调色板
                    inputPalettePath = TilePaletteGenerator.GenerateTilePaletteStatic(
                        sourceTexture,
                        inputTilesPath,
                        inputPalettesPath,
                        inputPaletteName,
                        preserveGuids
                    );

                    if (string.IsNullOrEmpty(inputPalettePath) || !File.Exists(inputPalettePath))
                    {
                        throw new System.Exception(GetLocalizedText("paletteNotGenerated"));
                    }

                    // 设置最后生成的调色板路径
                    SetLastGeneratedPalette(inputPalettePath);

                    // 如果有输出纹理，也为其生成调色板
                    if (outputTexture != null)
                    {
                        EditorUtility.DisplayProgressBar(
                            GetLocalizedText("automatedWorkflowProgress"),
                            GetLocalizedText("outputTextureGeneration"),
                            0.3f);

                        // 确保目录存在
                        Directory.CreateDirectory(outputTilesPath);
                        Directory.CreateDirectory(outputPalettesPath);

                        // 使用静态方法生成输出调色板
                        outputPalettePath = TilePaletteGenerator.GenerateTilePaletteStatic(
                            outputTexture,
                            outputTilesPath,
                            outputPalettesPath,
                            outputPaletteName,
                            preserveGuids
                        );

                        if (string.IsNullOrEmpty(outputPalettePath) || !File.Exists(outputPalettePath))
                        {
                            Debug.LogWarning(GetLocalizedText("outputTextureWarning"));
                        }
                    }
                }

                // 步骤2：创建规则
                if (automatedExtractRules && !string.IsNullOrEmpty(inputPalettePath))
                {
                    EditorUtility.DisplayProgressBar(
                        GetLocalizedText("automatedWorkflowProgress"),
                        GetLocalizedText("creatingRules"),
                        0.5f);

                    // 创建规则资产路径
                    string ruleAssetPath = Path.Combine(rulesPath, $"{ruleAssetName}.asset").Replace("\\", "/");

                    // 确保目录存在
                    Directory.CreateDirectory(Path.GetDirectoryName(ruleAssetPath));

                    // 检查是否已存在规则资产
                    AutoTerrainTileRuleConfiger ruleConfiger = AssetDatabase.LoadAssetAtPath<AutoTerrainTileRuleConfiger>(ruleAssetPath);

                    if (ruleConfiger == null)
                    {
                        // 创建新的规则配置器
                        ruleConfiger = CreateInstance<AutoTerrainTileRuleConfiger>();

                        // 设置默认值
                        ruleConfiger.emptyTileAlpha = 0.5f; // 设置默认透明度

                        // 创建资产
                        AssetDatabase.CreateAsset(ruleConfiger, ruleAssetPath);
                    }
                    else
                    {
                        // 如果已存在，清除缓存以确保正确加载
                        ruleConfiger.ClearCache();
                    }

                    // 加载调色板
                    GameObject inputPalette = AssetDatabase.LoadAssetAtPath<GameObject>(inputPalettePath);
                    GameObject outputPalette = null;

                    if (!string.IsNullOrEmpty(outputPalettePath))
                    {
                        outputPalette = AssetDatabase.LoadAssetAtPath<GameObject>(outputPalettePath);
                    }

                    if (inputPalette != null)
                    {
                        // 设置输入规则预制体
                        ruleConfiger.inputRulesPrefab = inputPalette;

                        // 如果有输出调色板，也设置它
                        if (outputPalette != null)
                        {
                            ruleConfiger.outputRulesPrefab = outputPalette;
                        }
                        else
                        {
                            // 如果没有输出调色板，则使用输入调色板作为输出规则
                            ruleConfiger.outputRulesPrefab = inputPalette;
                        }

                        // 获取调色板中的瓦片
                        Tilemap paletteTilemap = inputPalette.GetComponentInChildren<Tilemap>();
                        if (paletteTilemap != null)
                        {
                            // 尝试找到一个非空瓦片作为anyNonEmptyTile
                            if (ruleConfiger.anyNonEmptyTile == null)
                            {
                                BoundsInt bounds = paletteTilemap.cellBounds;
                                TileBase[] allTiles = paletteTilemap.GetTilesBlock(bounds);
                                foreach (TileBase tile in allTiles)
                                {
                                    if (tile != null)
                                    {
                                        ruleConfiger.anyNonEmptyTile = tile;
                                        break;
                                    }
                                }
                            }

                            // 使用静态方法提取规则
                            AutoTerrainTileRuleConfigerEditor.ExtractRulesFromPrefabsStatic(ruleConfiger);
                        }

                        // 标记资产为已修改并保存
                        EditorUtility.SetDirty(ruleConfiger);
                        AssetDatabase.SaveAssets();
                        AssetDatabase.Refresh();
                    }
                    else
                    {
                        Debug.LogWarning(GetLocalizedText("cannotLoadPalette") + " " + inputPalettePath);
                    }
                }

                // 步骤3：应用规则
                if (automatedApplyRules && sourceTilemap != null && outputTilemap != null)
                {
                    EditorUtility.DisplayProgressBar(
                        GetLocalizedText("automatedWorkflowProgress"),
                        GetLocalizedText("applyingRules"),
                        0.8f);

                    // 使用已设置的规则资产路径
                    string ruleAssetPath = Path.Combine(rulesPath, $"{ruleAssetName}.asset").Replace("\\", "/");

                    // 查找规则资产
                    AutoTerrainTileRuleConfiger ruleConfiger = AssetDatabase.LoadAssetAtPath<AutoTerrainTileRuleConfiger>(ruleAssetPath);

                    if (ruleConfiger != null)
                    {
                        // 创建AutoTerrainTileEditor实例
                        AutoTerrainTileEditor editor = CreateInstance<AutoTerrainTileEditor>();
                        editor.sourceTilemap = sourceTilemap;
                        editor.outputTilemap = outputTilemap;

                        // 添加规则作为迭代步骤
                        editor.SetDefaultTerrainRules(ruleConfiger);

                        // 应用规则
                        editor.ApplyAllIterations();

                        // 销毁临时编辑器实例
                        DestroyImmediate(editor);
                    }
                    else
                    {
                        Debug.LogWarning(GetLocalizedText("cannotLoadRuleAsset"));
                    }
                }

                // 完成 - 显示对话框而不是仅记录日志
                EditorUtility.DisplayDialog(
                    GetLocalizedText("success"),
                    GetLocalizedText("workflowCompleted"),
                    GetLocalizedText("ok"));
            }
            catch (System.Exception e)
            {
                // 错误处理 - 仅记录错误而不显示对话框
                if (e.Message.Contains("palette"))
                {
                    Debug.LogError(GetLocalizedText("paletteGenerationFailed") + " " + e.Message);
                }
                else if (e.Message.Contains("rule"))
                {
                    Debug.LogError(GetLocalizedText("ruleCreationFailed") + " " + e.Message);
                }
                else
                {
                    Debug.LogError(GetLocalizedText("ruleApplicationFailed") + " " + e.Message);
                }

                Debug.LogException(e);
            }
            finally
            {
                EditorUtility.ClearProgressBar();
                IsAutomatedWorkflow = false;
            }
        }

        private void DrawPaletteGenerationStep()
        {
            EditorGUILayout.HelpBox(GetLocalizedText("step1Help"), MessageType.Info);

            EditorGUILayout.Space();

            if (GUILayout.Button(GetLocalizedText("openGenerator"), GUILayout.Height(40)))
            {
                TilePaletteGenerator.ShowWindow();
            }

            // 显示最后生成的调色板
            if (!string.IsNullOrEmpty(lastGeneratedPalettePath))
            {
                EditorGUILayout.Space();
                EditorGUILayout.LabelField(GetLocalizedText("lastGenerated"), EditorStyles.boldLabel);
                EditorGUILayout.LabelField(System.IO.Path.GetFileName(lastGeneratedPalettePath));
                if (GUILayout.Button(GetLocalizedText("selectInProject")))
                {
                    var palette = AssetDatabase.LoadAssetAtPath<GameObject>(lastGeneratedPalettePath);
                    if (palette != null)
                    {
                        Selection.activeObject = palette;
                        EditorGUIUtility.PingObject(palette);
                    }
                }
            }

            EditorGUILayout.Space();
            EditorGUILayout.LabelField(GetLocalizedText("instructions"), EditorStyles.boldLabel);
            EditorGUILayout.LabelField(GetLocalizedText("step1Instr1"));
            EditorGUILayout.LabelField(GetLocalizedText("step1Instr2"));
            EditorGUILayout.LabelField(GetLocalizedText("step1Instr3"));
            EditorGUILayout.LabelField(GetLocalizedText("step1Instr4"));

            EditorGUILayout.Space();
            if (GUILayout.Button(GetLocalizedText("next", GetLocalizedText("step2")), GUILayout.Height(25)))
            {
                currentStep = WorkflowStep.CreateRules;
            }
        }

        private void DrawRuleCreationStep()
        {
            EditorGUILayout.HelpBox(GetLocalizedText("step2Help"), MessageType.Info);

            EditorGUILayout.Space();

            // 创建新规则按钮和查找现有规则按钮并排显示
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button(GetLocalizedText("createNewRule"), GUILayout.Height(40)))
            {
                CreateAutoTerrainTileRuleConfigerAsset();
            }
            if (GUILayout.Button(GetLocalizedText("findExistingRules"), GUILayout.Height(40)))
            {
                RefreshRulesList();
                isRuleListInitialized = true;
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space();

            // 显示规则列表（如果已初始化）
            if (isRuleListInitialized && existingRuleGuids.Count > 0)
            {
                EditorGUILayout.LabelField(GetLocalizedText("existingRules") + $" ({existingRuleGuids.Count})");

                // 使用滚动视图显示规则列表
                ruleListScrollPosition = EditorGUILayout.BeginScrollView(ruleListScrollPosition, GUILayout.Height(150));

                // 显示规则
                for (int i = 0; i < existingRuleGuids.Count; i++)
                {
                    EditorGUILayout.BeginHorizontal();

                    // 显示规则名称
                    EditorGUILayout.LabelField(existingRuleNames[i], EditorStyles.boldLabel);

                    // 选择按钮
                    if (GUILayout.Button(GetLocalizedText("select"), GUILayout.Width(60)))
                    {
                        SelectRuleByGuid(existingRuleGuids[i]);
                    }

                    EditorGUILayout.EndHorizontal();
                }

                EditorGUILayout.EndScrollView();
            }
            else if (isRuleListInitialized)
            {
                // 如果没有找到规则
                EditorGUILayout.HelpBox(GetLocalizedText("noRulesFound"), MessageType.Info);
            }

            EditorGUILayout.Space();
            EditorGUILayout.LabelField(GetLocalizedText("instructions"), EditorStyles.boldLabel);
            EditorGUILayout.LabelField(GetLocalizedText("step2Instr1"));
            EditorGUILayout.LabelField(GetLocalizedText("step2Instr2"));
            EditorGUILayout.LabelField(GetLocalizedText("step2Instr3"));
            EditorGUILayout.LabelField(GetLocalizedText("step2Instr4"));

            EditorGUILayout.Space();
            GUILayout.BeginHorizontal();
            if (GUILayout.Button(GetLocalizedText("previous"), GUILayout.Height(25)))
            {
                currentStep = WorkflowStep.GeneratePalette;
            }
            if (GUILayout.Button(GetLocalizedText("next", GetLocalizedText("step3")), GUILayout.Height(25)))
            {
                currentStep = WorkflowStep.ApplyTerrain;
            }
            GUILayout.EndHorizontal();
        }

        // 添加以下辅助方法
        private void RefreshRulesList()
        {
            existingRuleGuids.Clear();
            existingRuleNames.Clear();

            // 使用AssetDatabase查找所有AutoTerrainTileRuleConfiger资产
            string[] guids = AssetDatabase.FindAssets("t:AutoTerrainTileRuleConfiger");

            foreach (string guid in guids)
            {
                string path = AssetDatabase.GUIDToAssetPath(guid);
                AutoTerrainTileRuleConfiger rule = AssetDatabase.LoadAssetAtPath<AutoTerrainTileRuleConfiger>(path);

                if (rule != null)
                {
                    existingRuleGuids.Add(guid);
                    existingRuleNames.Add(Path.GetFileNameWithoutExtension(path));
                }
            }
        }

        private void SelectRuleByGuid(string guid)
        {
            string path = AssetDatabase.GUIDToAssetPath(guid);
            AutoTerrainTileRuleConfiger rule = AssetDatabase.LoadAssetAtPath<AutoTerrainTileRuleConfiger>(path);

            if (rule != null)
            {
                Selection.activeObject = rule;
                EditorGUIUtility.PingObject(rule);
            }
        }

        private void DrawTerrainApplicationStep()
        {
            EditorGUILayout.HelpBox(GetLocalizedText("step3Help"), MessageType.Info);
            EditorGUILayout.Space();

            // 打开完整编辑器按钮
            if (GUILayout.Button(GetLocalizedText("openTerrainEditor"), GUILayout.Height(40)))
            {
                AutoTerrainTileEditor.ShowWindow();
            }

            EditorGUILayout.Space();
            EditorGUILayout.LabelField(GetLocalizedText("savedOperations"), EditorStyles.boldLabel);

            // 获取保存的操作列表
            List<TerrainOperation> operations = LoadTerrainOperations();

            // 显示保存的操作列表
            EditorGUI.BeginChangeCheck();
            for (int i = 0; i < operations.Count; i++)
            {
                EditorGUILayout.BeginVertical(EditorStyles.helpBox);

                // 操作名称和启用状态
                EditorGUILayout.BeginHorizontal();
                operations[i].enabled = EditorGUILayout.Toggle(operations[i].enabled, GUILayout.Width(20));
                operations[i].name = EditorGUILayout.TextField(operations[i].name);

                // 删除按钮
                if (GUILayout.Button(GetLocalizedText("delete"), GUILayout.Width(60)))
                {
                    operations.RemoveAt(i);
                    SaveTerrainOperations(operations);
                    i--;
                    EditorGUILayout.EndHorizontal();
                    EditorGUILayout.EndVertical();
                    continue;
                }
                EditorGUILayout.EndHorizontal();

                // 操作详情
                EditorGUI.indentLevel++;
                operations[i].sourceTilemap = (Tilemap)EditorGUILayout.ObjectField(
                    GetLocalizedText("sourceTilemap"), operations[i].sourceTilemap, typeof(Tilemap), true);

                operations[i].outputTilemap = (Tilemap)EditorGUILayout.ObjectField(
                    GetLocalizedText("outputTilemap"), operations[i].outputTilemap, typeof(Tilemap), true);

                operations[i].terrainRules = (AutoTerrainTileRuleConfiger)EditorGUILayout.ObjectField(
                    GetLocalizedText("terrainRules"), operations[i].terrainRules, typeof(AutoTerrainTileRuleConfiger), false);

                operations[i].clearBeforeApply = EditorGUILayout.Toggle(
                    GetLocalizedText("clearBeforeApply"), operations[i].clearBeforeApply);

                // 应用单个操作按钮
                using (new EditorGUI.DisabledScope(operations[i].sourceTilemap == null ||
                                                  operations[i].outputTilemap == null ||
                                                  operations[i].terrainRules == null))
                {
                    if (GUILayout.Button(GetLocalizedText("applyOperation")))
                    {
                        ApplyTerrainOperation(operations[i]);
                    }
                }

                EditorGUI.indentLevel--;
                EditorGUILayout.EndVertical();
            }

            // 如果有任何更改，保存操作列表
            if (EditorGUI.EndChangeCheck())
            {
                SaveTerrainOperations(operations);
            }

            // 添加新操作按钮
            EditorGUILayout.Space();
            if (GUILayout.Button(GetLocalizedText("addOperation")))
            {
                TerrainOperation newOperation = new TerrainOperation
                {
                    name = GetLocalizedText("newOperation") + " " + (operations.Count + 1),
                    enabled = true,
                    clearBeforeApply = true
                };
                operations.Add(newOperation);
                SaveTerrainOperations(operations);
            }

            // 应用所有已启用操作按钮
            EditorGUILayout.Space();
            if (GUILayout.Button(GetLocalizedText("applyAllEnabled"), GUILayout.Height(30)))
            {
                ApplyAllEnabledOperations(operations);
            }

            EditorGUILayout.Space();
            EditorGUILayout.LabelField(GetLocalizedText("instructions"), EditorStyles.boldLabel);
            EditorGUILayout.LabelField(GetLocalizedText("step3Instr1"));
            EditorGUILayout.LabelField(GetLocalizedText("step3Instr2"));
            EditorGUILayout.LabelField(GetLocalizedText("step3Instr3"));
            EditorGUILayout.LabelField(GetLocalizedText("step3Instr4"));

            EditorGUILayout.Space();
            GUILayout.BeginHorizontal();
            if (GUILayout.Button(GetLocalizedText("previous"), GUILayout.Height(25)))
            {
                currentStep = WorkflowStep.CreateRules;
            }
            if (GUILayout.Button(GetLocalizedText("next", GetLocalizedText("step4")), GUILayout.Height(25)))
            {
                currentStep = WorkflowStep.LayerEditing;
            }
            GUILayout.EndHorizontal();
        }

        // 地形操作类，用于保存单个地形应用操作的配置
        [System.Serializable]
        private class TerrainOperation
        {
            public string name = "地形操作";
            public bool enabled = true;
            public Tilemap sourceTilemap;
            public Tilemap outputTilemap;
            public AutoTerrainTileRuleConfiger terrainRules;
            public bool clearBeforeApply = true;
        }

// 持久化地形操作的键
private const string TerrainOperationsCountKey = "TerrainOperations_Count";
private const string TerrainOperationNameKeyPrefix = "TerrainOperation_Name_";
private const string TerrainOperationEnabledKeyPrefix = "TerrainOperation_Enabled_";
private const string TerrainOperationClearBeforeApplyKeyPrefix = "TerrainOperation_ClearBeforeApply_";
private const string TerrainOperationSourceTilemapKeyPrefix = "TerrainOperation_SourceTilemap_";
private const string TerrainOperationOutputTilemapKeyPrefix = "TerrainOperation_OutputTilemap_";
private const string TerrainOperationRulesKeyPrefix = "TerrainOperation_Rules_";

        // 保存地形操作列表
        private static void SaveTerrainOperations(List<TerrainOperation> operations)
        {
            // 保存操作数量
            EditorPrefs.SetInt(TerrainOperationsCountKey, operations.Count);

            for (int i = 0; i < operations.Count; i++)
            {
                // 保存操作名称和启用状态
                EditorPrefs.SetString(TerrainOperationNameKeyPrefix + i, operations[i].name);
                EditorPrefs.SetBool(TerrainOperationEnabledKeyPrefix + i, operations[i].enabled);
                EditorPrefs.SetBool(TerrainOperationClearBeforeApplyKeyPrefix + i, operations[i].clearBeforeApply);

                // 保存Tilemap引用 - 使用GameObject路径而不是InstanceID
                if (operations[i].sourceTilemap != null)
                {
                    string sourcePath = instance.GetGameObjectPath(operations[i].sourceTilemap.gameObject);
                    EditorPrefs.SetString(TerrainOperationSourceTilemapKeyPrefix + i, sourcePath);
                }
                else
                {
                    EditorPrefs.DeleteKey(TerrainOperationSourceTilemapKeyPrefix + i);
                }

                if (operations[i].outputTilemap != null)
                {
                    string outputPath = instance.GetGameObjectPath(operations[i].outputTilemap.gameObject);
                    EditorPrefs.SetString(TerrainOperationOutputTilemapKeyPrefix + i, outputPath);
                }
                else
                {
                    EditorPrefs.DeleteKey(TerrainOperationOutputTilemapKeyPrefix + i);
                }

                // 保存规则文件引用
                if (operations[i].terrainRules != null)
                {
                    string guid = AssetDatabase.AssetPathToGUID(AssetDatabase.GetAssetPath(operations[i].terrainRules));
                    EditorPrefs.SetString(TerrainOperationRulesKeyPrefix + i, guid);
                }
                else
                {
                    EditorPrefs.DeleteKey(TerrainOperationRulesKeyPrefix + i);
                }
            }
        }

        // 加载地形操作列表
        private List<TerrainOperation> LoadTerrainOperations()
        {
            List<TerrainOperation> operations = new List<TerrainOperation>();
            int count = EditorPrefs.GetInt(TerrainOperationsCountKey, 0);

            for (int i = 0; i < count; i++)
            {
                TerrainOperation operation = new TerrainOperation();

                // 加载操作名称和启用状态
                if (EditorPrefs.HasKey(TerrainOperationNameKeyPrefix + i))
                {
                    operation.name = EditorPrefs.GetString(TerrainOperationNameKeyPrefix + i);
                }

                if (EditorPrefs.HasKey(TerrainOperationEnabledKeyPrefix + i))
                {
                    operation.enabled = EditorPrefs.GetBool(TerrainOperationEnabledKeyPrefix + i);
                }

                if (EditorPrefs.HasKey(TerrainOperationClearBeforeApplyKeyPrefix + i))
                {
                    operation.clearBeforeApply = EditorPrefs.GetBool(TerrainOperationClearBeforeApplyKeyPrefix + i);
                }

                // 加载Tilemap引用 - 使用GameObject路径而不是InstanceID
                if (EditorPrefs.HasKey(TerrainOperationSourceTilemapKeyPrefix + i))
                {
                    string sourcePath = EditorPrefs.GetString(TerrainOperationSourceTilemapKeyPrefix + i);
                    GameObject sourceGO = FindGameObjectByPath(sourcePath);
                    if (sourceGO != null)
                    {
                        operation.sourceTilemap = sourceGO.GetComponent<Tilemap>();
                    }
                }

                if (EditorPrefs.HasKey(TerrainOperationOutputTilemapKeyPrefix + i))
                {
                    string outputPath = EditorPrefs.GetString(TerrainOperationOutputTilemapKeyPrefix + i);
                    GameObject outputGO = FindGameObjectByPath(outputPath);
                    if (outputGO != null)
                    {
                        operation.outputTilemap = outputGO.GetComponent<Tilemap>();
                    }
                }

                // 加载规则文件引用
                if (EditorPrefs.HasKey(TerrainOperationRulesKeyPrefix + i))
                {
                    string guid = EditorPrefs.GetString(TerrainOperationRulesKeyPrefix + i);
                    string path = AssetDatabase.GUIDToAssetPath(guid);
                    if (!string.IsNullOrEmpty(path))
                    {
                        operation.terrainRules = AssetDatabase.LoadAssetAtPath<AutoTerrainTileRuleConfiger>(path);
                    }
                }

                operations.Add(operation);
            }

            return operations;
        }

// 应用单个地形操作
private void ApplyTerrainOperation(TerrainOperation operation)
{
    if (operation.sourceTilemap == null || operation.outputTilemap == null || operation.terrainRules == null)
        return;
    
    // 如果需要，先清除输出Tilemap
    if (operation.clearBeforeApply)
    {
        operation.outputTilemap.ClearAllTiles();
    }
    
    // 创建临时Tilemap用于处理
    GameObject tempGO = new GameObject("TempTilemap");
    Tilemap tempTilemap = tempGO.AddComponent<Tilemap>();
    tempGO.AddComponent<TilemapRenderer>();
    
    try
    {
        // 应用地形规则
        AutoTerrainTileEditor.ApplyTerrainRules(operation.sourceTilemap, tempTilemap, operation.terrainRules);
        
        // 合并结果到输出Tilemap
        AutoTerrainTileEditor.MergeTilemapToOutput(tempTilemap, operation.outputTilemap);
        
        // 处理emptyMarkerTile
        AutoTerrainTileEditor.ProcessEmptyMarkerTiles(operation.outputTilemap, operation.terrainRules);

        Debug.Log(GetLocalizedText("applyOperation") + $": {operation.name}");

        // 添加弹窗通知
        EditorUtility.DisplayDialog(
            GetLocalizedText("success"),
            $"{operation.name} {GetLocalizedText("applyOperation")}成功！",
            GetLocalizedText("ok"));
    }
    catch (System.Exception e)
    {
        Debug.LogError(GetLocalizedText("applyOperation") + $": {operation.name} Fail: {e.Message}");

        // 添加错误弹窗通知
        EditorUtility.DisplayDialog(
            GetLocalizedText("error"),
            $"{operation.name} {GetLocalizedText("applyOperation")}Fail: {e.Message}",
            GetLocalizedText("ok"));
    }
    finally
    {
        // 清理临时对象
        DestroyImmediate(tempGO);
    }
}

// 应用所有已启用的地形操作
private void ApplyAllEnabledOperations(List<TerrainOperation> operations)
{
    int successCount = 0;
    int failCount = 0;
    System.Text.StringBuilder errorMessages = new System.Text.StringBuilder();
    
    foreach (var operation in operations)
    {
        if (operation.enabled)
        {
            try
            {
                if (operation.sourceTilemap == null || operation.outputTilemap == null || operation.terrainRules == null)
                    continue;
                
                // 如果需要，先清除输出Tilemap
                if (operation.clearBeforeApply)
                {
                    operation.outputTilemap.ClearAllTiles();
                }
                
                // 创建临时Tilemap用于处理
                GameObject tempGO = new GameObject("TempTilemap");
                Tilemap tempTilemap = tempGO.AddComponent<Tilemap>();
                tempGO.AddComponent<TilemapRenderer>();
                
                // 应用地形规则
                AutoTerrainTileEditor.ApplyTerrainRules(operation.sourceTilemap, tempTilemap, operation.terrainRules);
                
                // 合并结果到输出Tilemap
                AutoTerrainTileEditor.MergeTilemapToOutput(tempTilemap, operation.outputTilemap);
                
                // 处理emptyMarkerTile
                AutoTerrainTileEditor.ProcessEmptyMarkerTiles(operation.outputTilemap, operation.terrainRules);
                
                // 清理临时对象
                DestroyImmediate(tempGO);
                
                successCount++;
                Debug.Log(GetLocalizedText("applyOperation") + $": {operation.name}");
            }
            catch (System.Exception e)
            {
                failCount++;
                string errorMsg = $"{operation.name}: {e.Message}";
                errorMessages.AppendLine(errorMsg);
                Debug.LogError(GetLocalizedText("applyOperation") + $": {operation.name} Fail: {e.Message}");
            }
        }
    }

    // 显示执行结果的弹窗通知
    if (failCount == 0)
    {
        EditorUtility.DisplayDialog(
            GetLocalizedText("success"),
            $"{GetLocalizedText("successfullyApplied")} {successCount} {GetLocalizedText("terrainOperations")}！",
            GetLocalizedText("ok"));
    }
    else
    {
        EditorUtility.DisplayDialog(
            GetLocalizedText("error"),
            $"{GetLocalizedText("successfullyApplied")} {successCount} {GetLocalizedText("terrainOperations")}，{failCount} {GetLocalizedText("operationsFailed")}。\n\n{GetLocalizedText("errorDetails")}:\n{errorMessages}",
            GetLocalizedText("ok"));
    }
}

        private void DrawLayerEditingStep()
        {
            EditorGUILayout.HelpBox(GetLocalizedText("step4Help"), MessageType.Info);
            
            EditorGUILayout.Space();
            
            if (GUILayout.Button(GetLocalizedText("openLayerTool"), GUILayout.Height(40)))
            {
                TilemapLayerTool.ShowWindow();
            }
            
            EditorGUILayout.Space();
            EditorGUILayout.LabelField(GetLocalizedText("instructions"), EditorStyles.boldLabel);
            EditorGUILayout.LabelField(GetLocalizedText("step4Instr1"));
            EditorGUILayout.LabelField(GetLocalizedText("step4Instr2"));
            EditorGUILayout.LabelField(GetLocalizedText("step4Instr3"));
            EditorGUILayout.LabelField(GetLocalizedText("step4Instr4"));
            
            EditorGUILayout.Space();
            if (GUILayout.Button(GetLocalizedText("previous"), GUILayout.Height(25)))
            {
                currentStep = WorkflowStep.ApplyTerrain;
            }
            
            EditorGUILayout.Space();
            EditorGUILayout.HelpBox(GetLocalizedText("workflowComplete"), MessageType.Info);
        }

        private void CreateAutoTerrainTileRuleConfigerAsset()
        {
            string path = EditorUtility.SaveFilePanelInProject(
                GetLocalizedText("createRuleAsset"),
                GetLocalizedText("newRuleAssetName"),
                "asset",
                GetLocalizedText("chooseRuleLocation"));

            if (!string.IsNullOrEmpty(path))
            {
                AutoTerrainTileRuleConfiger newTile = CreateInstance<AutoTerrainTileRuleConfiger>();
                AssetDatabase.CreateAsset(newTile, path);
                AssetDatabase.SaveAssets();
                Selection.activeObject = newTile;
                EditorGUIUtility.PingObject(newTile);
            }
        }
    }
    // 语言管理器类，用于集中管理插件的语言设置
    public static class TilemapLanguageManager
    {
        // 语言设置常量
        private const string PREF_LANGUAGE = "TilemapTools_Language";
        
        // 支持的语言枚举
        public enum Language
        {
            Auto,   // 自动跟随Unity编辑器
            English,
            Chinese
        }
        
        // 获取当前语言设置
        public static Language GetCurrentLanguageSetting()
        {
            return (Language)EditorPrefs.GetInt(PREF_LANGUAGE, (int)Language.Auto);
        }
        
        // 设置当前语言
        public static void SetCurrentLanguageSetting(Language language)
        {
            EditorPrefs.SetInt(PREF_LANGUAGE, (int)language);
        }
        
        // 获取实际使用的语言代码
        public static string GetCurrentLanguageCode()
        {
            Language setting = GetCurrentLanguageSetting();
            
            if (setting == Language.Auto)
            {
                // 获取Unity编辑器的当前语言
                string editorLanguage = EditorPrefs.GetString("Locale", "en");
                
                // 如果语言不是我们支持的，默认使用英语
                if (editorLanguage != "en" && editorLanguage != "zh-CN" && editorLanguage != "ja")
                {
                    return "en";
                }
                return editorLanguage;
            }
            else if (setting == Language.Chinese)
            {
                return "zh-CN";
            }
            else // English
            {
                return "en";
            }
        }
        
        // 获取语言名称的本地化文本
        public static string GetLanguageName(Language language)
        {
            string currentCode = GetCurrentLanguageCode();
            
            if (currentCode == "zh-CN")
            {
                switch (language)
                {
                    case Language.Auto: return "自动（跟随Unity）";
                    case Language.English: return "英语";
                    case Language.Chinese: return "中文";
                    default: return "未知";
                }
            }
            else // 默认英语
            {
                switch (language)
                {
                    case Language.Auto: return "Auto (Follow Unity)";
                    case Language.English: return "English";
                    case Language.Chinese: return "Chinese";
                    default: return "Unknown";
                }
            }
        }
    }
}
#endif
